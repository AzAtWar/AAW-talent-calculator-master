{"ast":null,"code":"import React from\"react\";import\"./Talent.css\";import talentBubble from\"../assets/talent-bubble.png\";import{useTooltipPos}from\"../hooks/useTooltipPos\";import{useTreeContext}from\"../TreeContext\";import{useTalentContext}from\"../TalentContext\";import{TalentTooltip}from\"./TalentTooltip\";import{SquareButton}from\"./SquareButton\";import{Arrow}from\"./Arrow\";import{getTalentRank,isTalentMaxed,isTalentUnlocked,getPointsLeft,getTalentData}from\"../TalentContext/selectors\";export const Talent=_ref=>{let{name}=_ref;const tree=useTreeContext();const{state,data,spendPoint,unspendPoint}=useTalentContext();const{pos,icon,arrows}=getTalentData(data,tree,name);const pointsLeft=getPointsLeft(state);const rank=getTalentRank(state,tree,name);const maxed=isTalentMaxed(state,data,tree,name);const unlocked=isTalentUnlocked(state,data,tree,name);const{anchorProps,tooltipProps,tooltipVisible}=useTooltipPos(rank);// TODO: too many edge cases here, hard to digest\n// move to a selector?\nconst talentState=(()=>{if(pointsLeft<1&&rank===0){return\"locked\";}if(maxed){return\"maxed\";}if(unlocked){return\"unlocked\";}return\"locked\";})();const outlineColor=(()=>{if(talentState===\"unlocked\"){return\"green\";}if(talentState===\"maxed\"){return\"gold\";}return\"grey\";})();return/*#__PURE__*/React.createElement(React.Fragment,null,arrows&&arrows.map((arrow,i)=>/*#__PURE__*/React.createElement(Arrow,Object.assign({key:i,active:unlocked},arrow))),/*#__PURE__*/React.createElement(\"div\",{className:\"Talent-container\",style:{gridArea:pos}},/*#__PURE__*/React.createElement(SquareButton,Object.assign({onClick:()=>spendPoint(tree,name),onRightClick:()=>unspendPoint(tree,name),icon:icon,disabled:talentState===\"locked\",outline:outlineColor},anchorProps)),talentState!==\"locked\"&&/*#__PURE__*/React.createElement(\"div\",{className:`Talent-pointCount Talent-pointCount--${outlineColor}`,style:{backgroundImage:`url(${talentBubble})`}},rank),tooltipVisible&&/*#__PURE__*/React.createElement(TalentTooltip,Object.assign({name:name,tree:tree},tooltipProps))));};","map":{"version":3,"names":["React","talentBubble","useTooltipPos","useTreeContext","useTalentContext","TalentTooltip","SquareButton","Arrow","getTalentRank","isTalentMaxed","isTalentUnlocked","getPointsLeft","getTalentData","Talent","_ref","name","tree","state","data","spendPoint","unspendPoint","pos","icon","arrows","pointsLeft","rank","maxed","unlocked","anchorProps","tooltipProps","tooltipVisible","talentState","outlineColor","createElement","Fragment","map","arrow","i","Object","assign","key","active","className","style","gridArea","onClick","onRightClick","disabled","outline","backgroundImage"],"sources":["D:/Warcraft/AAW-Talent-Calculator-master/src/components/Talent.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Talent.css\";\r\nimport talentBubble from \"../assets/talent-bubble.png\";\r\nimport { useTooltipPos } from \"../hooks/useTooltipPos\";\r\nimport { useTreeContext } from \"../TreeContext\";\r\nimport { useTalentContext } from \"../TalentContext\";\r\nimport { TalentTooltip } from \"./TalentTooltip\";\r\nimport { SquareButton } from \"./SquareButton\";\r\nimport { Arrow } from \"./Arrow\";\r\nimport {\r\n  getTalentRank,\r\n  isTalentMaxed,\r\n  isTalentUnlocked,\r\n  getPointsLeft,\r\n  getTalentData,\r\n} from \"../TalentContext/selectors\";\r\n\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nexport const Talent: React.FC<Props> = ({ name }) => {\r\n  const tree = useTreeContext();\r\n  const { state, data, spendPoint, unspendPoint } = useTalentContext();\r\n\r\n  const { pos, icon, arrows } = getTalentData(data, tree, name);\r\n  const pointsLeft = getPointsLeft(state);\r\n  const rank = getTalentRank(state, tree, name);\r\n  const maxed = isTalentMaxed(state, data, tree, name);\r\n  const unlocked = isTalentUnlocked(state, data, tree, name);\r\n\r\n  const { anchorProps, tooltipProps, tooltipVisible } = useTooltipPos<\r\n    HTMLButtonElement,\r\n    HTMLDivElement\r\n  >(rank);\r\n\r\n  // TODO: too many edge cases here, hard to digest\r\n  // move to a selector?\r\n  const talentState = (() => {\r\n    if (pointsLeft < 1 && rank === 0) {\r\n      return \"locked\";\r\n    }\r\n    if (maxed) {\r\n      return \"maxed\";\r\n    }\r\n    if (unlocked) {\r\n      return \"unlocked\";\r\n    }\r\n    return \"locked\";\r\n  })();\r\n\r\n  const outlineColor = (() => {\r\n    if (talentState === \"unlocked\") {\r\n      return \"green\";\r\n    }\r\n    if (talentState === \"maxed\") {\r\n      return \"gold\";\r\n    }\r\n    return \"grey\";\r\n  })();\r\n\r\n  return (\r\n    <>\r\n      {arrows &&\r\n        arrows.map((arrow, i) => (\r\n          <Arrow key={i} active={unlocked} {...arrow} />\r\n        ))}\r\n      <div className=\"Talent-container\" style={{ gridArea: pos }}>\r\n        <SquareButton\r\n          onClick={() => spendPoint(tree, name)}\r\n          onRightClick={() => unspendPoint(tree, name)}\r\n          icon={icon}\r\n          disabled={talentState === \"locked\"}\r\n          outline={outlineColor}\r\n          {...anchorProps}\r\n        />\r\n        {talentState !== \"locked\" && (\r\n          <div\r\n            className={`Talent-pointCount Talent-pointCount--${outlineColor}`}\r\n            style={{ backgroundImage: `url(${talentBubble})` }}\r\n          >\r\n            {rank}\r\n          </div>\r\n        )}\r\n        {tooltipVisible && (\r\n          <TalentTooltip name={name} tree={tree} {...tooltipProps} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}