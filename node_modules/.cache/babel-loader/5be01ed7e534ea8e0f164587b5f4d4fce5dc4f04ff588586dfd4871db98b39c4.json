{"ast":null,"code":"export const talentText=function(string){for(var _len=arguments.length,expressions=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){expressions[_key-1]=arguments[_key];}return rank=>{const result=[string[0]];expressions.forEach((expression,i)=>{result.push(expression[rank-1].toString(),string[i+1]);});return result.join(\"\");};};export const requireAll=requireContext=>{return requireContext.keys().reduce((prev,key)=>{// todo: this regex is quite brittle\nconst name=key.replace(/\\.\\//,\"\").replace(/\\.[^.]+$/,\"\");prev[name]=requireContext(key);return prev;},{});};export const trimEnd=(trimVal,list)=>{let lastSigIndex=list.length;while(list[lastSigIndex-1]===trimVal){lastSigIndex-=1;}return list.slice(0,lastSigIndex);};const glyphString=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";const glyphs=glyphString.split(\"\");const glyphMap=glyphs.reduce((prev,glyph,i)=>{prev[glyph]=i;return prev;},{});// all numbers are from 0 to 5;\nexport const encodeState=numbers=>{let result=\"\";const trimmed=trimEnd(0,numbers);// divide numbers into pairs\n// encode them as a glyph\nfor(let i=0;i<trimmed.length;i+=2){const first=numbers[i];const second=numbers[i+1];const index=first*6+(second||0);result+=glyphs[index];}return result;};export const decodeState=hash=>{const chars=hash.split(\"\");let result=[];for(let char of chars){const value=glyphMap[char];const first=Math.floor(value/6);const second=value%6;result.push(first,second);}return result;};","map":{"version":3,"names":["talentText","string","_len","arguments","length","expressions","Array","_key","rank","result","forEach","expression","i","push","toString","join","requireAll","requireContext","keys","reduce","prev","key","name","replace","trimEnd","trimVal","list","lastSigIndex","slice","glyphString","glyphs","split","glyphMap","glyph","encodeState","numbers","trimmed","first","second","index","decodeState","hash","chars","char","value","Math","floor"],"sources":["D:/Warcraft/AAW-Talent-Calculator-master/src/utils.ts"],"sourcesContent":["export const talentText = (\r\n  string: TemplateStringsArray,\r\n  ...expressions: (string | number)[][]\r\n) => (rank: number) => {\r\n  const result = [string[0]];\r\n  expressions.forEach((expression, i) => {\r\n    result.push(expression[rank - 1].toString(), string[i + 1]);\r\n  });\r\n  return result.join(\"\");\r\n};\r\n\r\nexport const requireAll = (\r\n  requireContext: __WebpackModuleApi.RequireContext,\r\n) => {\r\n  return requireContext.keys().reduce<Record<string, string>>((prev, key) => {\r\n    // todo: this regex is quite brittle\r\n    const name = key.replace(/\\.\\//, \"\").replace(/\\.[^.]+$/, \"\");\r\n    prev[name] = requireContext(key);\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\nexport const trimEnd = <T>(trimVal: T, list: T[]) => {\r\n  let lastSigIndex = list.length;\r\n  while (list[lastSigIndex - 1] === trimVal) {\r\n    lastSigIndex -= 1;\r\n  }\r\n  return list.slice(0, lastSigIndex);\r\n};\r\n\r\nconst glyphString = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst glyphs = glyphString.split(\"\");\r\nconst glyphMap = glyphs.reduce<Record<string, number>>((prev, glyph, i) => {\r\n  prev[glyph] = i;\r\n  return prev;\r\n}, {});\r\n\r\n// all numbers are from 0 to 5;\r\nexport const encodeState = (numbers: number[]) => {\r\n  let result = \"\";\r\n  const trimmed = trimEnd(0, numbers);\r\n\r\n  // divide numbers into pairs\r\n  // encode them as a glyph\r\n  for (let i = 0; i < trimmed.length; i += 2) {\r\n    const first = numbers[i];\r\n    const second = numbers[i + 1];\r\n    const index = first * 6 + (second || 0);\r\n    result += glyphs[index];\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const decodeState = (hash: string) => {\r\n  const chars = hash.split(\"\");\r\n  let result = [];\r\n\r\n  for (let char of chars) {\r\n    const value = glyphMap[char];\r\n    const first = Math.floor(value / 6);\r\n    const second = value % 6;\r\n    result.push(first, second);\r\n  }\r\n  return result;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}