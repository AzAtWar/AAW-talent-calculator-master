{"ast":null,"code":"import{encodeState,decodeState,trimEnd}from\"../utils\";const SPLIT_SYMBOL=\"-\";const getTreeStateFromHash=function(talentNames){let hash=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";const ranks=decodeState(hash);return talentNames.reduce((prev,name,i)=>{prev[name]=ranks[i]||0;return prev;},{});};export const getStateFromHash=function(data){let hash=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";const hashes=hash.split(SPLIT_SYMBOL);return Object.entries(data).reduce((prev,_ref,i)=>{let[treeName,treeData]=_ref;prev[treeName]=getTreeStateFromHash(Object.keys(treeData.talents),hashes[i]);return prev;},{});};export const getHashFromState=state=>{const hashes=Object.values(state).reduce((prev,ranks)=>{const treeHash=encodeState(Object.values(ranks));prev.push(treeHash||\"0\");return prev;},[]);return trimEnd(\"0\",hashes).join(SPLIT_SYMBOL);};","map":{"version":3,"names":["encodeState","decodeState","trimEnd","SPLIT_SYMBOL","getTreeStateFromHash","talentNames","hash","arguments","length","undefined","ranks","reduce","prev","name","i","getStateFromHash","data","hashes","split","Object","entries","_ref","treeName","treeData","keys","talents","getHashFromState","state","values","treeHash","push","join"],"sources":["D:/Warcraft/AAW-Talent-Calculator-master/src/TalentContext/encoding.ts"],"sourcesContent":["import { State, TalentData } from \"./types\";\r\nimport { encodeState, decodeState, trimEnd } from \"../utils\";\r\n\r\nconst SPLIT_SYMBOL = \"-\";\r\n\r\nconst getTreeStateFromHash = (talentNames: string[], hash: string = \"\") => {\r\n  const ranks = decodeState(hash);\r\n  return talentNames.reduce<Record<string, number>>((prev, name, i) => {\r\n    prev[name] = ranks[i] || 0;\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\nexport const getStateFromHash = (data: TalentData, hash: string = \"\") => {\r\n  const hashes = hash.split(SPLIT_SYMBOL);\r\n  return Object.entries(data).reduce<State>((prev, [treeName, treeData], i) => {\r\n    prev[treeName] = getTreeStateFromHash(\r\n      Object.keys(treeData.talents),\r\n      hashes[i],\r\n    );\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\nexport const getHashFromState = (state: State) => {\r\n  const hashes = Object.values(state).reduce<string[]>((prev, ranks) => {\r\n    const treeHash = encodeState(Object.values(ranks));\r\n    prev.push(treeHash || \"0\");\r\n    return prev;\r\n  }, []);\r\n  return trimEnd(\"0\", hashes).join(SPLIT_SYMBOL);\r\n};\r\n"],"mappings":"AACA,OAASA,WAAW,CAAEC,WAAW,CAAEC,OAAO,KAAQ,UAAU,CAE5D,KAAM,CAAAC,YAAY,CAAG,GAAG,CAExB,KAAM,CAAAC,oBAAoB,CAAG,QAAAA,CAACC,WAAqB,CAAwB,IAAtB,CAAAC,IAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACpE,KAAM,CAAAG,KAAK,CAAGT,WAAW,CAACK,IAAI,CAAC,CAC/B,MAAO,CAAAD,WAAW,CAACM,MAAM,CAAyB,CAACC,IAAI,CAAEC,IAAI,CAAEC,CAAC,GAAK,CACnEF,IAAI,CAACC,IAAI,CAAC,CAAGH,KAAK,CAACI,CAAC,CAAC,EAAI,CAAC,CAC1B,MAAO,CAAAF,IAAI,CACb,CAAC,CAAE,CAAC,CAAC,CAAC,CACR,CAAC,CAED,MAAO,MAAM,CAAAG,gBAAgB,CAAG,QAAAA,CAACC,IAAgB,CAAwB,IAAtB,CAAAV,IAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAClE,KAAM,CAAAU,MAAM,CAAGX,IAAI,CAACY,KAAK,CAACf,YAAY,CAAC,CACvC,MAAO,CAAAgB,MAAM,CAACC,OAAO,CAACJ,IAAI,CAAC,CAACL,MAAM,CAAQ,CAACC,IAAI,CAAAS,IAAA,CAAwBP,CAAC,GAAK,IAA5B,CAACQ,QAAQ,CAAEC,QAAQ,CAAC,CAAAF,IAAA,CACnET,IAAI,CAACU,QAAQ,CAAC,CAAGlB,oBAAoB,CACnCe,MAAM,CAACK,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAC7BR,MAAM,CAACH,CAAC,CACV,CAAC,CACD,MAAO,CAAAF,IAAI,CACb,CAAC,CAAE,CAAC,CAAC,CAAC,CACR,CAAC,CAED,MAAO,MAAM,CAAAc,gBAAgB,CAAIC,KAAY,EAAK,CAChD,KAAM,CAAAV,MAAM,CAAGE,MAAM,CAACS,MAAM,CAACD,KAAK,CAAC,CAAChB,MAAM,CAAW,CAACC,IAAI,CAAEF,KAAK,GAAK,CACpE,KAAM,CAAAmB,QAAQ,CAAG7B,WAAW,CAACmB,MAAM,CAACS,MAAM,CAAClB,KAAK,CAAC,CAAC,CAClDE,IAAI,CAACkB,IAAI,CAACD,QAAQ,EAAI,GAAG,CAAC,CAC1B,MAAO,CAAAjB,IAAI,CACb,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAAV,OAAO,CAAC,GAAG,CAAEe,MAAM,CAAC,CAACc,IAAI,CAAC5B,YAAY,CAAC,CAChD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}