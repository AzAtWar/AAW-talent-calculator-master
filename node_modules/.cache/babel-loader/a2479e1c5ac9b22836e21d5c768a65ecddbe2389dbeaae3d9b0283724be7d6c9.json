{"ast":null,"code":"import React,{useEffect}from\"react\";import{withRouter,matchPath}from\"react-router-dom\";import\"./KlassTrees.css\";import{config}from\"../config\";import{useTalentContext,getPointsLeft,getTreePointsSpent,getStateFromHash,getHashFromState}from\"../TalentContext\";import{TalentTree}from\"../components/TalentTree\";import{ClearButton}from\"../components/ClearButton\";export const KlassTrees=withRouter(_ref=>{let{klass,location,history}=_ref;const{state,data,resetAll,restoreState}=useTalentContext();const pointsLeft=getPointsLeft(state);const treeNames=Object.keys(data);const treePointsSpent=treeNames.map(treeName=>getTreePointsSpent(state,treeName)).join(\"/\");const requiredLevel=config.TOTAL_POINTS-pointsLeft+config.FIRST_POINT_LEVEL-1;// TODO: move this into a hook?\nuseEffect(()=>{const match=matchPath(location.pathname,{path:\"/:klass/:skills\"});const hash=match&&match.params&&match.params.skills;if(hash){restoreState(getStateFromHash(data,hash));}},[]);useEffect(()=>{const match=matchPath(location.pathname,{path:\"/:klass\"});const klass=match&&match.params&&match.params.klass;const skillHash=getHashFromState(state);if(skillHash){history.replace(`/${klass}/${skillHash}`);}else{history.replace(`/${klass}`);}},[state]);return/*#__PURE__*/React.createElement(\"div\",{className:\"KlassTrees-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"KlassTrees\"},/*#__PURE__*/React.createElement(\"div\",{className:\"KlassTrees-header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"KlassTrees-titleArea\"},/*#__PURE__*/React.createElement(\"h1\",null,klass,\" \",treePointsSpent),/*#__PURE__*/React.createElement(\"p\",{className:\"KlassTrees-summary\"},\"Required level: \",requiredLevel>=10?requiredLevel:\"-\"),/*#__PURE__*/React.createElement(\"p\",{className:\"KlassTrees-summary\"},\"Points left: \",pointsLeft)),/*#__PURE__*/React.createElement(ClearButton,{onClick:()=>resetAll()},\"Clear all\")),/*#__PURE__*/React.createElement(\"div\",{className:\"KlassTrees-list\"},treeNames.map(name=>/*#__PURE__*/React.createElement(TalentTree,{key:name,name:name})))));});","map":{"version":3,"names":["React","useEffect","withRouter","matchPath","config","useTalentContext","getPointsLeft","getTreePointsSpent","getStateFromHash","getHashFromState","TalentTree","ClearButton","KlassTrees","_ref","klass","location","history","state","data","resetAll","restoreState","pointsLeft","treeNames","Object","keys","treePointsSpent","map","treeName","join","requiredLevel","TOTAL_POINTS","FIRST_POINT_LEVEL","match","pathname","path","hash","params","skills","skillHash","replace","createElement","className","onClick","name","key"],"sources":["D:/Warcraft/AAW-Talent-Calculator-master/src/views/KlassTrees.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { withRouter, matchPath, RouteComponentProps } from \"react-router-dom\";\r\n\r\nimport \"./KlassTrees.css\";\r\nimport { config } from \"../config\";\r\nimport {\r\n  useTalentContext,\r\n  getPointsLeft,\r\n  getTreePointsSpent,\r\n  getStateFromHash,\r\n  getHashFromState,\r\n} from \"../TalentContext\";\r\nimport { TalentTree } from \"../components/TalentTree\";\r\nimport { ClearButton } from \"../components/ClearButton\";\r\n\r\ninterface Props extends RouteComponentProps {\r\n  klass: string;\r\n}\r\n\r\nexport const KlassTrees = withRouter<Props, React.FC<Props>>(\r\n  ({ klass, location, history }) => {\r\n    const { state, data, resetAll, restoreState } = useTalentContext();\r\n\r\n    const pointsLeft = getPointsLeft(state);\r\n    const treeNames = Object.keys(data);\r\n    const treePointsSpent = treeNames\r\n      .map(treeName => getTreePointsSpent(state, treeName))\r\n      .join(\"/\");\r\n\r\n    const requiredLevel =\r\n      config.TOTAL_POINTS - pointsLeft + config.FIRST_POINT_LEVEL - 1;\r\n\r\n    // TODO: move this into a hook?\r\n    useEffect(() => {\r\n      const match = matchPath<{ skills: string }>(location.pathname, {\r\n        path: \"/:klass/:skills\",\r\n      });\r\n      const hash = match && match.params && match.params.skills;\r\n      if (hash) {\r\n        restoreState(getStateFromHash(data, hash));\r\n      }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      const match = matchPath<{ klass: string }>(location.pathname, {\r\n        path: \"/:klass\",\r\n      });\r\n      const klass = match && match.params && match.params.klass;\r\n      const skillHash = getHashFromState(state);\r\n      if (skillHash) {\r\n        history.replace(`/${klass}/${skillHash}`);\r\n      } else {\r\n        history.replace(`/${klass}`);\r\n      }\r\n    }, [state]);\r\n\r\n    return (\r\n      <div className=\"KlassTrees-container\">\r\n        <div className=\"KlassTrees\">\r\n          <div className=\"KlassTrees-header\">\r\n            <div className=\"KlassTrees-titleArea\">\r\n              <h1>\r\n                {klass} {treePointsSpent}\r\n              </h1>\r\n              <p className=\"KlassTrees-summary\">\r\n                Required level: {requiredLevel >= 10 ? requiredLevel : \"-\"}\r\n              </p>\r\n              <p className=\"KlassTrees-summary\">Points left: {pointsLeft}</p>\r\n            </div>\r\n            <ClearButton onClick={() => resetAll()}>Clear all</ClearButton>\r\n          </div>\r\n          <div className=\"KlassTrees-list\">\r\n            {treeNames.map(name => (\r\n              <TalentTree key={name} name={name} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}